<?xml version="1.0" encoding="UTF-8"?>

<!-- ==== #29. mapper 기본설정 ==== -->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- ==== #29. 루트 엘리먼트 & 네임스페이스 설정(프로젝트 전체내에서 유일해야 한다.) ==== -->
<mapper namespace="hr">
			<!--  ; ( 세미 콜론 찍으면 안된다. )-->
			<insert id="test_insert">
				insert into spring_exam ( no , name , writeday , addr)
				values( 101, '엄정화' , default , '서울시 마포구' )
			</insert>
			
			<select id="depIdList" resultType="String">
				select distinct (nvl( department_id , -9999 )) as department_id  from employees
				order by department_id asc
			</select>
			
			<resultMap type="HashMap" id="empDeptMap">
				<result property="department_id" column="department_id" javaType="String" />
				<result property="department_name" column="department_name" javaType="String" />
				<result property="employee_id" column="employee_id" javaType="String" />
				<result property="fullname" column="fullname" javaType="String" />
				<result property="hire_date" column="hire_date" javaType="String" />
				<result property="monthsal" column="monthsal" javaType="String" />
				<result property="gender" column="gender" javaType="String" />
				<result property="age" column="age" javaType="String" />
			</resultMap>
			
			<select id="empList" resultMap="empDeptMap" parameterType="HashMap">
			select E.department_id , D.department_name , E.employee_id , 
			       E.first_name || '' || E.last_name AS fullname , 
			       to_char(E.hire_date , 'yyyy-mm-dd' ) AS hire_date , 
			       nvl (E.salary + E.salary* e.commission_pct , E.salary ) as monthsal ,
			       func_gender (E.jubun) AS gender ,
			       func_age (E.jubun) AS age
			from employees E left join departments D
			on E.department_id = D.department_id
			where  1=1 
			<if test="arr_DeptId != null">
				and nvl(E.department_id ,-9999) in 
				<foreach collection="arr_DeptId" index="i" open="(" separator="," close=")">
						'${arr_DeptId[i]}'
				</foreach>
			</if>
			
			<if test="gender != null">
				and func_gender(E.jubun) = #{gender}
			</if>
			order by E.department_id , E.employee_id
			</select>
			
			<insert id="addEmpList" parameterType="HashMap">
					insert into employees(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID, JUBUN) 
       				values( to_number( #{EMPLOYEE_ID} ) , #{FIRST_NAME} , #{LAST_NAME} , #{EMAIL} , #{PHONE_NUMBER} , to_date( #{HIRE_DATE} , 'yyyy-mm-dd') , #{JOB_ID} , to_number(#{SALARY}) , to_number(#{COMMISSION_PCT}) , to_number(#{MANAGER_ID}) , to_number( #{DEPARTMENT_ID} ) , #{JUBUN} )			
      		 </insert>
      		 
      		 <resultMap type="HashMap" id="employeeCntByDeptname_map">
				<result property="department_name" column="department_name" javaType="String" />
				<result property="cnt" column="cnt" javaType="String" />
				<result property="percent" column="percent" javaType="String" />
			</resultMap>
      		 
      		 <select id="employeeCntByDeptname" resultMap="employeeCntByDeptname_map">
      		 		select nvl(D.department_name, '부서없음') as department_name , count(*) as cnt 
      		 		, round (count(*)/(select count(*) from employees )*100 , 2 ) as percent  
					from employees E left join departments D
					on E.department_id = D.department_id
					group by D.department_name
					order by cnt desc
      		 </select>
      		 
      		 <resultMap type="HashMap" id="employeeCntByGender_map">
				<result property="gender" column="gender" javaType="String" />
				<result property="cnt" column="cnt" javaType="String" />
				<result property="percent" column="percent" javaType="String" />
			</resultMap>
			
			<select id="employeeCntByGender" resultMap="employeeCntByGender_map">
			select E.gender ,count(*) as cnt , round (count(*)/(select count(*) from employees )*100 , 2 ) as percent  
			from 
			(
			select department_id  , func_gender( jubun ) as gender , jubun 
			from employees 
			)
			E 
			group by E.gender
			order by cnt desc 
			</select>
			
			 <resultMap type="HashMap" id="employeeCntByGenderHireYear_map">
				<result property="gender" column="gender" javaType="String" />
				<result property="Y2001" column="Y2001" javaType="String" />
				<result property="Y2002" column="Y2002" javaType="String" />
				<result property="Y2003" column="Y2003" javaType="String" />
				<result property="Y2004" column="Y2004" javaType="String" />
				<result property="Y2005" column="Y2005" javaType="String" />
				<result property="Y2006" column="Y2006" javaType="String" />
				<result property="Y2007" column="Y2007" javaType="String" />
				<result property="Y2008" column="Y2008" javaType="String" />
			</resultMap>
			<select id="employeeCntByGenderHireYear" resultMap="employeeCntByGenderHireYear_map">
			select func_gender(jubun) as gender  
					       ,SUM ( DECODE ( extract( year from hire_date ) , 2001 , 1 , 0 )) AS "Y2001"
					        , SUM ( DECODE ( extract( year from hire_date ) , 2002 , 1 , 0 )) AS "Y2002"
					         , SUM ( DECODE ( extract( year from hire_date ) , 2003 , 1 , 0 )) AS "Y2003"
					          , SUM ( DECODE ( extract( year from hire_date ) , 2004 , 1 , 0 )) AS "Y2004"
					           , SUM ( DECODE ( extract( year from hire_date ) , 2005 , 1 , 0 )) AS "Y2005"
					            , SUM ( DECODE ( extract( year from hire_date ) , 2006 , 1 , 0 )) AS "Y2006"
					             , SUM ( DECODE ( extract( year from hire_date ) , 2007 , 1 , 0 )) AS "Y2007"
					              , SUM ( DECODE ( extract( year from hire_date ) , 2008 , 1 , 0 )) AS "Y2008"
					from employees 
					where extract ( year from hire_date ) between 2001 and 2008
					group by func_gender(jubun) 
				order by 1
			</select>
</mapper>